/* 
 * iMusic DTOs
 *
 * iMusic
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TODO: add iMusic email
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace iMusic.Dto.Model
{
    /// <summary>
    /// ArtistDTO
    /// </summary>
    [DataContract]
        public partial class ArtistDTO :  IEquatable<ArtistDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArtistDTO" /> class.
        /// </summary>
        /// <param name="artistId">artistId.</param>
        /// <param name="name">name.</param>
        /// <param name="bio">bio.</param>
        /// <param name="image">image.</param>
        public ArtistDTO(decimal? artistId = default(decimal?), string name = default(string), string bio = default(string), string image = default(string))
        {
            this.ArtistId = artistId;
            this.Name = name;
            this.Bio = bio;
            this.Image = image;
        }
        
        /// <summary>
        /// Gets or Sets ArtistId
        /// </summary>
        [DataMember(Name="artistId", EmitDefaultValue=false)]
        public decimal? ArtistId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name="bio", EmitDefaultValue=false)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArtistDTO {\n");
            sb.Append("  ArtistId: ").Append(ArtistId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArtistDTO);
        }

        /// <summary>
        /// Returns true if ArtistDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ArtistDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArtistDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArtistId == input.ArtistId ||
                    (this.ArtistId != null &&
                    this.ArtistId.Equals(input.ArtistId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArtistId != null)
                    hashCode = hashCode * 59 + this.ArtistId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Bio != null)
                    hashCode = hashCode * 59 + this.Bio.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
